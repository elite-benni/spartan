import { joinPathFragments, Tree } from '@nx/devkit';
import { createTreeWithEmptyWorkspace } from '@nx/devkit/testing';

import { extractPrimitiveCodeGenerator, ExtractPrimitiveCodeGeneratorSchema } from './generator';

describe('extractPrimitiveCodeGenerator', () => {
	let tree: Tree;
	const componentsBasePath = 'apps/app/src/app/pages/(components)/components';

	beforeEach(() => {
		tree = createTreeWithEmptyWorkspace();
	});

	it('should generate .generated.ts file for a valid primitive', async () => {
		const primitiveName = 'alert';
		const primitiveDir = joinPathFragments(componentsBasePath, primitiveName);
		const previewFilePath = joinPathFragments(primitiveDir, `${primitiveName}.preview.ts`);
		const generatedFilePath = joinPathFragments(primitiveDir, `${primitiveName}.generated.ts`);

		const mockPreviewContent = `
import { Component } from '@angular/core';
import { NgIcon, provideIcons } from '@ng-icons/core';
import { lucideBox } from '@ng-icons/lucide';
import { HlmAlertDirective } from '@spartan-ng/helm/alert'; // Simplified for test

@Component({
  selector: 'spartan-alert-preview',
  imports: [HlmAlertDirective, NgIcon],
  providers: [provideIcons({ lucideBox })],
  template: \`
    <div hlmAlert>
      <ng-icon name="lucideBox" />
      <h4>Test Alert</h4>
    </div>
  \`
})
export class AlertPreviewComponent {}

// Skeleton should not be part of defaultCode
export const defaultSkeleton = \`
    <div hlmAlert>
\`;

// Imports should not be part of defaultCode
export const defaultImports = \`
    <div hlmAlert>
\`;
`;
		tree.write(previewFilePath, mockPreviewContent);

		// Create the directory structure
		tree.write(joinPathFragments(primitiveDir, `${primitiveName}.page.ts`), `// Mock page.ts`);

		const options: ExtractPrimitiveCodeGeneratorSchema = {};
		await extractPrimitiveCodeGenerator(tree, options);

		expect(tree.exists(generatedFilePath)).toBe(true);

		const generatedContent = tree.read(generatedFilePath, 'utf-8') || '';

		// Check for defaultCode
		expect(generatedContent).toContain('export const defaultCode = `');
		expect(generatedContent).toContain('spartan-alert-preview'); // from selector
		expect(generatedContent).toContain('export class AlertPreviewComponent {}');
		expect(generatedContent).toContain('export const previousDefaultCode = \\`test\\`;'); // Check escaping and inclusion
		expect(generatedContent).not.toContain('export const Skeleton'); // Check that the Skeleton is not included
		expect(generatedContent).not.toContain('export const defaultImports');

		// Check for header comments
		expect(generatedContent).toContain('// eslint-disable -- auto-generated');
		expect(generatedContent).toContain('// @ts-nocheck -- auto-generated');
		expect(generatedContent).toContain('// prettier-ignore -- auto-generated');
		expect(generatedContent).toContain('DO NOT EDIT THIS FILE!!');
	});

	it('should not generate files if components directory does not exist', async () => {
		const options: ExtractPrimitiveCodeGeneratorSchema = {};
		// Ensure the directory does not exist (it doesn't by default in an empty tree)
		await extractPrimitiveCodeGenerator(tree, options);
		// No files should be generated, and it should not throw an error.
		// We can check by listing children of a non-existent path or checking a specific file.
		const alertGeneratedPath = joinPathFragments(componentsBasePath, 'alert', 'alert.generated.ts');
		expect(tree.exists(alertGeneratedPath)).toBe(false);
	});

	it('should skip a primitive if preview.ts is missing', async () => {
		const primitiveName = 'button';
		const primitiveDir = joinPathFragments(componentsBasePath, primitiveName);
		// Create directory but no preview.ts
		tree.write(joinPathFragments(primitiveDir, `${primitiveName}.page.ts`), `// Mock page.ts`);

		const options: ExtractPrimitiveCodeGeneratorSchema = {};
		await extractPrimitiveCodeGenerator(tree, options);

		const generatedFilePath = joinPathFragments(primitiveDir, `${primitiveName}.generated.ts`);
		expect(tree.exists(generatedFilePath)).toBe(false);
	});
});
