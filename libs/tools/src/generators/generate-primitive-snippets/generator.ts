import { Tree, formatFiles, joinPathFragments, logger } from '@nx/devkit';
import ts from 'typescript';
import { getVariableNameFromFilename } from './getVarNameFromFileName';

// Define the schema interface, even if it's empty for now
export interface ExtractPrimitiveCodeGeneratorSchema {
	// Currently no options, but good practice to have it defined
	projectName?: string; // Optional: specify a project, otherwise scan apps
}
interface CodeSnippet {
	exampleName: string;
	code: string;
}

function getSourceFile(tree: Tree, filePath: string): ts.SourceFile | undefined {
	const content = tree.read(filePath, 'utf-8');
	if (!content) {
		logger.warn(`File not found or empty: ${filePath}`);
		return undefined;
	}

	const sourceFile = ts.createSourceFile(filePath, content, ts.ScriptTarget.Latest, true);
	return sourceFile;
}

function removeDefaultCodesAndGetContent(sourceFile: ts.SourceFile) {
	let content = '';
	ts.forEachChild(sourceFile, (node) => {
		const nodeText = node.getFullText(sourceFile);
		const pattern = /^export\s+const\s+\w+Code\s*=/;

		if (
			pattern.test(nodeText) ||
			nodeText.includes('export const codeSkeleton =') ||
			nodeText.includes('export const codeImports =')
		) {
			return;
		}

		content += nodeText;
	});
	return content.trim();
}

export async function extractPrimitiveCodeGenerator(tree: Tree, _schema: ExtractPrimitiveCodeGeneratorSchema) {
	logger.info('Extract Primitive Code generator running...');

	const componentsDir = 'apps/app/src/app/pages/(components)/components';

	// Check if the base directory exists
	if (!tree.exists(componentsDir)) {
		logger.warn(`Base components directory not found: ${componentsDir}. Nothing to do.`);
		return;
	}

	const componentDirs = tree.children(componentsDir);
	console.log(`Found ${componentDirs.length} component directories.`);

	for (const primitiveName of componentDirs) {
		const codeSnippets: CodeSnippet[] = [];
		const primitiveNameWithoutParentheses = primitiveName.replaceAll('(', '').replaceAll(')', '');
		const primitiveDir = joinPathFragments(componentsDir, primitiveName);
		if (tree.isFile(primitiveDir)) {
			continue;
		}

		const exampleFiles = tree.children(primitiveDir);
		exampleFiles.forEach((exampleFileName) => {
			if (!exampleFileName.endsWith('.preview.ts') && !exampleFileName.endsWith('.example.ts')) {
				return;
			}
			let exampleName = '';
			if (exampleFileName === primitiveNameWithoutParentheses + '.preview.ts') {
				exampleName = 'defaultCode';
			} else {
				exampleName = getVariableNameFromFilename(exampleFileName);
			}

			const fullFileName = joinPathFragments(primitiveDir, exampleFileName);
			const previewSourceFile = getSourceFile(tree, fullFileName);
			if (!previewSourceFile) {
				return; // Already logged by getSourceFile
			}

			logger.info(`Processing ${exampleFileName}`);
			const code = removeDefaultCodesAndGetContent(previewSourceFile);

			codeSnippets.push({
				exampleName,
				code,
			});
		});

		if (codeSnippets.length === 0) {
			logger.info(`No code snippets found for ${primitiveDir}. Skipping.`);
			continue;
		}

		const generatedFilePath = joinPathFragments(primitiveDir, `${primitiveNameWithoutParentheses}.generated.ts`);
		const generatedFileContent = `// eslint-disable -- auto-generated
// @ts-nocheck -- auto-generated
// prettier-ignore -- auto-generated
/*
DO NOT EDIT THIS FILE!!
It is automatically generated by the extract-primitive-code generator.
Instead, edit the \`${primitiveName}.preview.ts\` file or the generator itself.
Run \`pnpm run generate-snippets\` to update this file.
*/

${codeSnippets
	.map((snippet) => {
		return `export const ${snippet.exampleName} = \`\n${snippet.code.replace(/`/g, '\\`')}\n\`;
`;
	})
	.join('')}

`;

		tree.write(generatedFilePath, generatedFileContent);
		logger.info(`Generated ${codeSnippets.length} snippets in ${generatedFilePath}`);
	}

	await formatFiles(tree);

	return () => {
		logger.info('Extract Primitive Code generator finished.');
		logger.info(
			`IMPORTANT: Ensure that your page.ts files (e.g., ${componentDirs[0]}/${componentDirs[0]}.page.ts) are updated to import these variables from the new .generated.ts files.`,
		);
	};
}

export default extractPrimitiveCodeGenerator;
